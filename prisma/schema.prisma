// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(EMPLOYEE)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  active       Boolean  @default(true)

  // Relations
  orders       Order[]
  inventoryLogs InventoryLog[]

  @@map("users")
}

model Customer {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  phone          String
  address        String   @db.Text
  documentNumber String   @map("document_number")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  active         Boolean  @default(true)

  // Relations
  orders Order[]

  @@map("customers")
}

model ProductGroup {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  category    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  active      Boolean  @default(true)

  // Relations
  products Product[]

  @@map("product_groups")
}

model Product {
  id                 Int         @id @default(autoincrement())
  name               String
  description        String?     @db.Text
  sku                String      @unique
  costPrice          Decimal     @map("cost_price") @db.Decimal(10, 2)
  rentalPrice        Decimal     @map("rental_price") @db.Decimal(10, 2)
  salePrice          Decimal     @map("sale_price") @db.Decimal(10, 2)
  stockQuantity      Int         @map("stock_quantity")
  size               String?
  color              String?
  productType        ProductType @map("product_type")
  groupId            Int         @map("group_id")
  imageUrl           String?     @map("image_url")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  active             Boolean     @default(true)
  availableForRental Boolean     @default(true) @map("available_for_rental")
  availableForSale   Boolean     @default(true) @map("available_for_sale")

  // Relations
  group         ProductGroup   @relation(fields: [groupId], references: [id])
  orderItems    OrderItem[]
  inventoryLogs InventoryLog[]

  @@map("products")
}

model Order {
  id              Int         @id @default(autoincrement())
  customerId      Int         @map("customer_id")
  userId          Int         @map("user_id")
  orderNumber     String      @unique @map("order_number")
  orderType       OrderType   @map("order_type")
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  orderDate       DateTime    @map("order_date")
  rentalStartDate DateTime?   @map("rental_start_date")
  rentalEndDate   DateTime?   @map("rental_end_date")
  returnDate      DateTime?   @map("return_date")
  notes           String?     @db.Text
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  customer      Customer       @relation(fields: [customerId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  orderPayments OrderPayment[]

  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int      @map("order_id")
  productId  Int      @map("product_id")
  quantity   Int
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  itemType   ItemType @map("item_type")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model InventoryLog {
  id             Int                  @id @default(autoincrement())
  productId      Int                  @map("product_id")
  quantityChange Int                  @map("quantity_change")
  operationType  InventoryOperation   @map("operation_type")
  reason         String
  userId         Int                  @map("user_id")
  createdAt      DateTime             @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("inventory_logs")
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  orderPayments OrderPayment[]

  @@map("payment_methods")
}

model OrderPayment {
  id              Int           @id @default(autoincrement())
  orderId         Int           @map("order_id")
  paymentMethodId Int           @map("payment_method_id")
  amount          Decimal       @db.Decimal(10, 2)
  notes           String?       @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("order_payments")
}

model Company {
  id                Int      @id @default(autoincrement())
  razaoSocial       String   @map("razao_social")
  nomeFantasia      String   @map("nome_fantasia")
  endereco          String
  numero            String
  complemento       String?
  bairro            String
  cidade            String
  estado            String
  cep               String
  telefone1         String   @map("telefone_1")
  telefone2         String?  @map("telefone_2")
  cnpj              String   @unique
  inscricaoEstadual String?  @map("inscricao_estadual")
  observacaoAluguel String?  @db.Text @map("observacao_aluguel")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("company")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProductType {
  FANTASY
  ACCESSORY
}

enum OrderType {
  RENTAL
  SALE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  RETURNED
  CANCELLED
}

enum ItemType {
  RENTAL
  SALE
}

enum InventoryOperation {
  PURCHASE
  SALE
  RENTAL
  RETURN
  ADJUSTMENT
  DAMAGE
}