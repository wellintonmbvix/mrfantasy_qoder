// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(EMPLOYEE)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  active       Boolean  @default(true)

  // Relations
  orders       Order[]
  inventoryLogs InventoryLog[]
  cashTransactions CashTransaction[]
  cancelledCashTransactions CashTransaction[] @relation("CashTransactionCancelledBy")
  auditLogs    AuditLog[]

  @@map("users")
}

model Customer {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  phone          String
  phone2         String?  @map("phone_2")
  address        String   @db.Text
  number         String
  complement     String?
  neighborhood   String
  city           String
  state          String
  zipCode        String   @map("zip_code")
  documentNumber String   @map("document_number")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  active         Boolean  @default(true)

  // Relations
  orders Order[]

  @@map("customers")
}

model ProductGroup {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  category    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  active      Boolean  @default(true)

  // Relations
  products Product[]

  @@map("product_groups")
}

model Product {
  id                 Int         @id @default(autoincrement())
  name               String
  description        String?     @db.Text
  sku                String      @unique
  costPrice          Decimal     @map("cost_price") @db.Decimal(10, 2)
  rentalPrice        Decimal     @map("rental_price") @db.Decimal(10, 2)
  salePrice          Decimal     @map("sale_price") @db.Decimal(10, 2)
  stockQuantity      Int         @map("stock_quantity")
  size               String?
  color              String?
  productType        ProductType @map("product_type")
  groupId            Int         @map("group_id")
  imageUrl           String?     @map("image_url")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  active             Boolean     @default(true)
  availableForRental Boolean     @default(true) @map("available_for_rental")
  availableForSale   Boolean     @default(true) @map("available_for_sale")

  // Relations
  group         ProductGroup   @relation(fields: [groupId], references: [id])
  orderItems    OrderItem[]
  inventoryLogs InventoryLog[]

  @@map("products")
}

model Order {
  id              Int         @id @default(autoincrement())
  customerId      Int?        @map("customer_id")
  userId          Int         @map("user_id")
  attendantId     Int?        @map("attendant_id")
  orderNumber     String      @unique @map("order_number")
  subtotalAmount  Decimal     @map("subtotal_amount") @db.Decimal(10, 2)
  discountType    DiscountType? @map("discount_type")
  discountValue   Decimal?    @map("discount_value") @db.Decimal(10, 2)
  surchargeType   DiscountType? @map("surcharge_type")
  surchargeValue  Decimal?    @map("surcharge_value") @db.Decimal(10, 2)
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  orderDate       DateTime    @map("order_date")
  rentalStartDate DateTime?   @map("rental_start_date")
  rentalEndDate   DateTime?   @map("rental_end_date")
  returnDate      DateTime?   @map("return_date")
  notes           String?     @db.Text
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  customer      Customer?      @relation(fields: [customerId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  attendant     Employee?      @relation(fields: [attendantId], references: [id])
  orderItems    OrderItem[]
  orderPayments OrderPayment[]

  @@map("orders")
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  orderId       Int          @map("order_id")
  productId     Int          @map("product_id")
  quantity      Int
  unitPrice     Decimal      @map("unit_price") @db.Decimal(10, 2)
  discountType  DiscountType? @map("discount_type")
  discountValue Decimal?     @map("discount_value") @db.Decimal(10, 2)
  surchargeType DiscountType? @map("surcharge_type")
  surchargeValue Decimal?    @map("surcharge_value") @db.Decimal(10, 2)
  totalPrice    Decimal      @map("total_price") @db.Decimal(10, 2)
  itemType      ItemType     @map("item_type")
  itemTaken     Boolean      @default(false) @map("item_taken")
  itemReturned  Boolean      @default(false) @map("item_returned")
  createdAt     DateTime     @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model InventoryLog {
  id             Int                  @id @default(autoincrement())
  productId      Int                  @map("product_id")
  quantityChange Int                  @map("quantity_change")
  operationType  InventoryOperation   @map("operation_type")
  reason         String
  userId         Int                  @map("user_id")
  createdAt      DateTime             @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("inventory_logs")
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  orderPayments OrderPayment[]

  @@map("payment_methods")
}

model OrderPayment {
  id              Int           @id @default(autoincrement())
  orderId         Int           @map("order_id")
  paymentMethodId Int           @map("payment_method_id")
  amount          Decimal       @db.Decimal(10, 2)
  notes           String?       @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("order_payments")
}

model Employee {
  id             Int      @id @default(autoincrement())
  name           String
  abbreviation   String   @map("abbreviation")
  email          String   @unique
  phone          String
  phone2         String?  @map("phone_2")
  address        String   @db.Text
  number         String
  complement     String?
  neighborhood   String
  city           String
  state          String
  zipCode        String   @map("zip_code")
  documentNumber String   @map("document_number")
  position       String   @map("position")
  hireDate       DateTime @map("hire_date")
  dismissalDate  DateTime? @map("dismissal_date")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  active         Boolean  @default(true)

  // Relations
  orders Order[]

  @@map("employees")
}

model Company {
  id                Int      @id @default(autoincrement())
  razaoSocial       String   @map("razao_social")
  nomeFantasia      String   @map("nome_fantasia")
  endereco          String
  numero            String
  complemento       String?
  bairro            String
  cidade            String
  estado            String
  cep               String
  telefone1         String   @map("telefone_1")
  telefone2         String?  @map("telefone_2")
  cnpj              String   @unique
  inscricaoEstadual String?  @map("inscricao_estadual")
  observacaoAluguel String?  @db.Text @map("observacao_aluguel")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("company")
}

model Settings {
  id                     Int      @id @default(autoincrement())
  databaseVersion        Int      @map("database_version")
  receiptInBobina        Boolean  @default(false) @map("receipt_in_bobina")
  inhibitSurcharge       Boolean  @default(false) @map("inhibit_surcharge")
  allowNegativeStock     Boolean  @default(false) @map("allow_negative_stock")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model CashTransaction {
  id              Int                    @id @default(autoincrement())
  type            CashTransactionType    @map("transaction_type")
  amount          Decimal                @db.Decimal(10, 2)
  description     String?                @db.Text
  userId          Int                    @map("user_id")
  status          CashTransactionStatus  @default(ACTIVE)
  cancelledAt     DateTime?              @map("cancelled_at")
  cancelledBy     Int?                   @map("cancelled_by")
  cancelReason    String?                @db.Text @map("cancel_reason")
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")

  // Relations
  user            User                   @relation(fields: [userId], references: [id])
  cancelledByUser User?                  @relation("CashTransactionCancelledBy", fields: [cancelledBy], references: [id])

  @@map("cash_transactions")
}

// Modelo para logs de auditoria
model AuditLog {
  id              Int        @id @default(autoincrement())
  timestamp       DateTime   @default(now())
  module          String     // Módulo onde ocorreu a operação (customers, employees, etc.)
  actionType      String     // Tipo de operação (CREATE, UPDATE, DELETE)
  originalData    String?    @db.Text // Dados originais em formato JSON
  newData         String?    @db.Text // Novos dados em formato JSON (para UPDATE/CREATE)
  userId          Int        @map("user_id")
  ipAddress       String?    @map("ip_address")
  userAgent       String?    @db.Text @map("user_agent")
  createdAt       DateTime   @default(now()) @map("created_at")

  // Relations
  user            User       @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum CashTransactionType {
  FUND           // Fundo de caixa - Crédito
  WITHDRAWAL     // Sangria - Débito
  SUPPLY         // Suprimento - Crédito
  SURPLUS        // Sobra de caixa - Crédito
}

enum CashTransactionStatus {
  ACTIVE
  CANCELLED
}

enum ProductType {
  FANTASY
  ACCESSORY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  RETURNED
  CANCELLED
}

enum ItemType {
  RENTAL
  SALE
}

enum InventoryOperation {
  PURCHASE
  SALE
  RENTAL
  RETURN
  ADJUSTMENT
  DAMAGE
}

enum DiscountType {
  PERCENTAGE
  FIXED
}